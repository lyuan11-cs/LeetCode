二分法： 
1.二分法基本功： 


第一境界： 
二分位置 之 圈圈叉叉 BinarySearch On Index OOXX
	找到满足某个条件的第一个位置或者最后一个位置

第二境界：二分位置 之 保留一半 Binary Search On Index - Half Half
	保留有解的一半，或者去掉无解的一半；

第三境界： 二分答案 Binary 

2.时间复杂度小练习；

二分法: T(n) = T(n/2) + O(1) = O(logn)
时间复杂度：如果通过O(1)时间， 把规模为n的问题转换成规模为n/2的问题；

T(n) = O(n) + T(n/2) => O(n) + O(n/2) + O(n/4) + O(n / 8 ) + O(n/16) = O(2n);=O(n) 
通过O(n) 的时间，把规模为n的问题转换为规模为n/2的问题；

O(1)极少；
O(logn) 几乎都是二分法；
O(sqrt(n)) 几乎是分解质因数
O(n) 高频；
O(nlogn) 一般都是要排序
O(n * n) 数组，枚举，动态规划；
O(n * n * n) 数组枚举，动态规划；
O(2 ^ n) 与组合有关的搜索；
O(n!) 与排列有关的搜过；DFS

比O(n) 更优的方法是O（logn)


3.递归与非递归的权衡；

堆： 支持logn， 用priority queue；
面试中是否使用recursion: 
3.1.面试官要求不适用recursion；
3.2.不用recursion会造成实现很复杂；
3.3.recursion的深度会很深；
3.4.题目的考点是recursion vs non-recursion；

递归与动态规划；
可以和面试官讨论；

4.二分的三大痛点

二分法常见痛点：
1.循环结束条件：
start <= end;
start < end
start + 1 < end;不会产生死循环，但是会产生double check；后面check一下

2.指针变化到底是哪个： 
start = mid;
start = mid + 1;
start = mid - 1;


5.通用的二分法模板；

// The array must be sorted
public class Solution{
	public int findPosition(int[] nums, int target){
		if(nums == null || nums.length == 0){
			return -1;
		}

		int start = 0, end = nums.length - 1;

		while(start + 1 < end || start <= end) { //loop ends condition 
			int mid = start + (end - start) / 2;
			if(nums[mid] == target){
				return mid;
			}else if (nums[mid] < target){
				start = mid;
			}else{
				end = mid;
			}
		}

		if(nums[start] == target）{
			return start;
		}
		if(nums[end] == target){
			return end;
		}

		return -1;
	}
}













